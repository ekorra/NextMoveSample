using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json.Linq;
using NextMove.Lib;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    
    public partial class Welcome<T>
    {
        [JsonProperty("standardBusinessDocumentHeader")]
        public StandardBusinessDocumentHeader StandardBusinessDocumentHeader { get; set; }

        [JsonProperty("something")]
        //[JsonConverter(typeof(AnyConverter))]
        public  MyProp<T> BusniessObject{ get; set; }

       // [JsonProperty("something")]
        public object SomeObject { get; set; }
    }

    public class MyProp<T>
    {
        private T _value;

        public T Value
        {
            get
            {
                // insert desired logic here
                return _value;
            }
            set
            {
                // insert desired logic here
                _value = value;
            }
        }

        public static implicit operator T(MyProp<T> value)
        {
            return value.Value;
        }

        public static implicit operator MyProp<T>(T value)
        {
            return new MyProp<T> { Value = value };
        }
    }

public partial class Digital
    {
        [JsonProperty("sikkerhetsnivaa")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Sikkerhetsnivaa { get; set; }

        [JsonProperty("hoveddokument")]
        public string Hoveddokument { get; set; }

        [JsonProperty("tittel")]
        public string Tittel { get; set; }

        [JsonProperty("spraak")]
        public string Spraak { get; set; }

        [JsonProperty("digitalPostInfo")]
        public DigitalPostInfo DigitalPostInfo { get; set; }

        [JsonProperty("varsler")]
        public Varsler Varsler { get; set; }
    }

    public partial class DigitalPostInfo
    {
        [JsonProperty("virkningsdato")]
        public DateTimeOffset Virkningsdato { get; set; }

        [JsonProperty("aapningskvittering")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool Aapningskvittering { get; set; }
    }

    public partial class Varsler
    {
        [JsonProperty("epostTekst")]
        public string EpostTekst { get; set; }

        [JsonProperty("smsTekst")]
        public string SmsTekst { get; set; }
    }

    public partial class StandardBusinessDocumentHeader
    {
        [JsonProperty("headerVersion")]
        public string HeaderVersion { get; set; }

        [JsonProperty("sender")]
        public List<Receiver> Sender { get; set; }

        [JsonProperty("receiver")]
        public List<Receiver> Receiver { get; set; }

        [JsonProperty("documentIdentification")]
        public DocumentIdentification DocumentIdentification { get; set; }

        [JsonProperty("businessScope")]
        public BusinessScope BusinessScope { get; set; }
    }

    public partial class BusinessScope
    {
        [JsonProperty("scope")]
        public List<Scope> Scope { get; set; }
    }

    public partial class Scope
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("instanceIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? InstanceIdentifier { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }
    }

    public partial class DocumentIdentification
    {
        [JsonProperty("standard")]
        public string Standard { get; set; }

        [JsonProperty("typeVersion")]
        public string TypeVersion { get; set; }

        [JsonProperty("instanceIdentifier")]
        public Guid InstanceIdentifier { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("creationDateAndTime")]
        public DateTimeOffset CreationDateAndTime { get; set; }
    }

    public partial class Receiver
    {
        [JsonProperty("identifier")]
        public Identifier Identifier { get; set; }
    }

    public partial class Identifier
    {
        [JsonProperty("authority")]
        public string Authority { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class Welcome<T>
    {
        public static Welcome<T> FromJson(string json) => JsonConvert.DeserializeObject<Welcome<T>>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson<T>(this Welcome<T> self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
